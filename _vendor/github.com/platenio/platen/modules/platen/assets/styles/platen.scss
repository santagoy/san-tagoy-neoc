{{- $context           := .                                                     -}}
{{- $PlatenConfig      := partialCached "platen/param/getKey" "platen" "platen" -}}
{{- $theme             := $PlatenConfig.theme                                   -}}
{{- $shoelace          := dict                                                  -}}
{{- $variablesPartial  := "platen/utils/styles/variables"                       -}}
{{- $importPartial     := "platen/utils/styles/import"                          -}}
{{- $fontsPartial      := "platen/utils/styles/fonts"                           -}}
{{- $markupPartial     := "platen/utils/styles/markup"                          -}}
{{- $shortcodesPartial := "platen/utils/styles/shortcodes"                      -}}

// Handle shoelace info if needed.
{{- if $PlatenConfig.features.shoelace.enabled -}}
  {{- $ConfigKey      := "platen.features.shoelace"                                -}}
  {{- $ShoelaceConfig := partialCached "platen/param/getKey" $ConfigKey $ConfigKey -}}
  {{- $Version        := $ShoelaceConfig.version | default "2.3.0"                 -}}
  {{- $UrlPrefix      := "https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace"   -}}
  {{- $LightThemeUrl  := printf "%s@%v/dist/themes/light.css" $UrlPrefix $Version  -}}
  {{- $DarkThemeUrl   := printf "%s@%v/dist/themes/dark.css"  $UrlPrefix $Version  -}}
  {{- $shoelace        = merge $shoelace (dict "Enabled" true)                     -}}
  {{- $shoelace        = merge $shoelace (dict "LightThemeUrl" $LightThemeUrl)     -}}
  {{- $shoelace        = merge $shoelace (dict "DarkThemeUrl" $DarkThemeUrl)       -}}
{{- end -}}

// Add the Base URL prefix - this makes it easier to reference static elements.
$BaseURLPrefix: "{{ "" | relURL }}";

// Adds the basic SCSS variables. These can be strings or maps. Values in this
// group must not reference other values, only primitives.
{{- range $name, $value := $theme.variables.basic_scss -}}
  {{ $params := dict "Name" $name "Value" $value "IsDefault" true }}
  {{ partial $variablesPartial $params }}
{{ end }}

// Adds calculated SCSS variables which depend on previously declared variables
// defined in the basic list.
{{- range $name, $value := $theme.variables.calculated_scss }}
  {{ $params := dict "Name" $name "Value" $value "IsDefault" true }}
  {{ partial $variablesPartial $params }}
{{ end }}

// Themes use custom CSS properties as variables. They can be selected on a per
// mode basis. Custom color themes can be implemented by overriding these values
// in the site configuration. Further customization requires more in-depth
// handling.
//
// This also imports the CSS for shoelace before defining any theme variables.
@mixin theme-light {
  {{ if $shoelace.Enabled -}}
    @use url('{{ $shoelace.LightThemeUrl }}');
  {{- end }}
  {{ range $name, $value := $theme.variables.light_css }}
    {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
    {{ partial $variablesPartial $params }}
  {{ end }}
}

@mixin theme-dark {
  {{ if $shoelace.Enabled -}}
    @use url('{{ $shoelace.DarkThemeUrl }}');
  {{- end }}
  {{ range $name, $value := $theme.variables.dark_css }}
    {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
    {{ partial $variablesPartial $params }}
  {{ end }}
}

// Add custom CSS properties unrelated to the theme's mode.
:root {
  {{ range $name, $value := $theme.variables.custom_css }}
    {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
    {{ partial $variablesPartial $params }}
  {{ end }}
}

// Load user defined variables before continuing. This is an alternative to
// adding variables through the configuration.
@use "variables";

// Modes determine whether the site uses light mode, dark mode, or automatically
// shows the same mode as the site user's system preferences.
html.platen-theme-mode-light {
  @include theme-light;
}

html.platen-theme-mode-dark {
  @include theme-dark;
}

html.platen-theme-mode-auto {
  @include theme-light;

  @media (prefers-color-scheme: dark) {
    @include theme-dark;
  }
}

// Ensure theme mode variables propagate to shoelace
{{ if and $shoelace.Enabled (in (slice "light" "auto") $theme.mode) }}
  :host, sl-theme-light {
    {{ range $name, $value := $theme.variables.light_css }}
      {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
      {{ partial $variablesPartial $params }}
    {{ end }}
  }
{{ end }}
{{ if and $shoelace.Enabled (in (slice "dark" "auto") $theme.mode) }}
  :host, sl-theme-dark {
    {{ range $name, $value := $theme.variables.dark_css }}
      {{ $params := dict "Name" $name "Value" $value "IsCSS" true }}
      {{ partial $variablesPartial $params }}
    {{ end }}
  }
{{ end }}

// Normalize the styles before applying specifics
@use "normalize";

// Utils need to be loaded before more specific / component-oriented styles
// because they may/will use these utils.
{{ partial $importPartial (dict "StylesMap" $theme.styles.utils "RootFolder" "utils") }}

// The basic global classes for shoelace components
{{ partial $importPartial (dict "StylesMap" $theme.styles.shoelace "RootFolder" "shoelace") }}

// The base styles for general structure on the site.
{{ partial $importPartial (dict "StylesMap" $theme.styles.base "RootFolder" "base") }}

// Applies to platen-specific components, but general - specifics for shortcodes
// are handled on a per-shortcode basis.
{{ partial $importPartial (dict "StylesMap" $theme.styles.platen "RootFolder" "platen") }}

// Ensures functionality on mobile.
{{ partial $importPartial (dict "StylesMap" $theme.styles.mobile "RootFolder" "mobile") }}

// Applies when the screen is particularly wide.
{{ partial $importPartial (dict "StylesMap" $theme.styles.wide "RootFolder" "wide") }}

// Settings for when a site user tries to print a web page
{{ partial $importPartial (dict "StylesMap" $theme.printing.styles "RootFolder" "printing") }}

// Markdown covers article/post content, not the site-wide or structural items.
{{ partial $importPartial (dict "StylesMap" $theme.styles.markdown "RootFolder" "markdown") }}

// Add in all of the fonts.
{{ partial $fontsPartial $theme.fonts }}

// Loop over the enabled features, handling each in turn. Features must be independently styled.
{{ range $feature, $settings := $PlatenConfig.features -}}
  {{- if $settings.enabled -}}
    {{- with $settings.partials.style }}
      {{ partial . $context }}
    {{- end -}}
  {{- end -}}
{{- end -}}

// Loop over the enabled markup extensions, handling each in turn. They may be independently styled.
{{ range $markup, $settings := $PlatenConfig.markup -}}
  {{- if $settings.enabled -}}
    {{- with $settings.partials.style }}
      {{ partial . $context }}
    {{- end -}}
    {{ with $settings.style }}
      {{ partial $markupPartial (dict "Name" $markup "Settings" $settings) }}
    {{ end }}
  {{- end -}}
{{- end -}}

// Shortcodes must always load _after_ all more normal/universal items.
{{ range $shortcode, $settings := $PlatenConfig.shortcodes }}
  {{ if $settings.enabled }}
    {{ with $settings.style }}
      {{ partial $shortcodesPartial (dict "Name" $shortcode "Settings" $settings) }}
    {{ end }}
  {{ end }}
{{ end }}

// Custom site-maintainer defined styles.
@use "custom";
